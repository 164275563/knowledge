规范化
  编码规范: ESLint|StyleLint
  其他:目录|前后端接口|文档|组件管理|Git分支管理|Commit描述|定期CodeReview|视觉图标
模块化
  概念:大文件拆成相互依赖的小文件(分治)，再统一拼接和加载，语言层面代码拆分
  JS模块化:
    ES6模块系统
    模块打包加载工具: Webpack+Babel(同步加载)|SystemJS+Babel(异步加载)
  CSS模块化:
    (预处理器: SASS,LESS,Stylus)
    CSS Modules: JS管理依赖, 如Vue的scoped style
组件化
  概念: 功能完备的机构单元位组件，设计层面对用户界面拆分
  思想: 组件优先，以前DOM优先。对面向对象进一步抽象
  组件间关系: 逻辑继承，样式扩展，模板嵌套，包含等，即依赖
  组件化框架: Vue,React,Angular2
自动化(流程)
  图片合并: Gulp+SpriteSmith代替PS，FontCustom代替Icommoon
  持续集成，自动化构建|部署|测试
    前端测试框架: Karma+Mocha+Chai
  构建工具:基于Gulp实现独立于项目的构建工具
性能优化？？
  https://developers.google.com/web/tools/chrome-devtools/rendering-tools/
  https://developers.google.com/web/fundamentals/performance/

Web应用是运行浏览器的软件，软件的图形用户界面（Graphical User Interface，简称GUI）即为前端

前端工程三阶段:
  库/框架类型选择:
  简单构建优化:
  JS/CSS模块化开发:
  第四阶段:
    组件化开发:
      页面上独立的可视/可交互区域为一个组件；
      每组件对应一个工程目录，组件所需的各种资源在目录下就近维护；
      组件间可自由组合；
      页面是组件的容器，负责组合组件形成界面；
    智能静态资源管理:
      前端是远程部署，运行时增量下载
      基础架构中贯彻增量原则。
      静态资源管理系统 = 资源表 + 资源加载框架


gulp/grunt browserify/webpack/seajs/requirejs区别
Gulp/Grunt是种工具，能优化前端工作流程。如自动刷新页面、combo、压缩css、js、编译less等等
browserify/webpack/seajs / requirejs 。四个都是JS模块化方案。其中seajs/ requirejs是种类型，browserify/webpack是另一种类型。
seajs/requirejs 是在线"编译"模块的方案，相当于在页面上加载一个CMD/AMD 解释器。这样浏览器就认识了define、exports、module 。也就实现了模块化。
browserify / webpack 是预编译模块的方案，这个方案更加智能。以webpack为例,首先，是预编译的，不需在浏览器加载解释器。另外，你在本地直接写JS，不管是AMD/CMD /ES6风格的模块化，它都能认识，并且编译成浏览器认识的JS。
Gulp是一个工具，而webpack等等是模块化方案。Gulp也可以配置seajs、requirejs甚至webpack的插件。