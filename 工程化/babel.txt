//http://es6.ruanyifeng.com/#docs/intro
Babel 是ES6 转码器
配置文件是.babelrc，存放在项目根目录
  {
    "presets": [],
    "plugins": []
  }

转码规则:
  # 最新转码规则
  $ npm i babel-preset-latest -D

  # react 转码规则
  $ npm i babel-preset-react -D

  # 不同阶段语法提案的转码规则(共有4个阶段)，选装一个
  $ npm i babel-preset-stage-0 -D
  $ npm i babel-preset-stage-1 -D
  $ npm i babel-preset-stage-2 -D
  $ npm i babel-preset-stage-3 -D

  {
    "presets": [
      "latest",
      "react",
      "stage-2"
    ],
    "plugins": []
  }

Babel提供babel-cli工具，用于命令行转码
$ npm i -g babel-cli
  
  基本语法:
  # 转码结果输出到标准输出
  $ babel example.js

  # 转码结果写入一个文件
  $ babel example.js -o compiled.js
  # 或者
  $ babel example.js --out-file compiled.js

  # 整个目录转码
  $ babel src -d lib
  # 或者
  $ babel src --out-dir lib

  # -s 参数生成source map文件
  $ babel src -d lib -s

本地也装bebel-cli
npm i babel-cli -D

  package.json文件
  {
    "scripts": {
      "build": "babel src -d lib"
    }
  }

  转码时: npm run build

babel-node
  babel-cli工具自带babel-node命令,提供支持ES6的REPL环境
  babel-node命令可以直接运行ES6脚本
    $ babel-node
    > (x => x * 2)(1)
    2
    $ babel-node es6.js
    2

babel-register
  使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码
  $ npm i babel-register -D

    文件头加上
    require("babel-register");
    require("./index.js");
    然后，就不需要手动对index.js转码了

babel-core
  调用Babel的API进行转码，就要使用babel-core模块
  $ npm i babel-core -D

    var babel = require('babel-core');
    // 字符串转码
    babel.transform('code();', options);
    // => { code, map, ast }
    // 文件转码(异步)
    babel.transformFile('filename.js', options, function(err, result) {
      result; // => { code, map, ast }
    });
    // 文件转码(同步)
    babel.transformFileSync('filename.js', options);
    // => { code, map, ast }
    // Babel AST转码
    babel.transformFromAst(ast, code, options);
    // => { code, map, ast }

babel-polyfill
  Babel默认只转换新JS句法(syntax)，而不转换新API，
    如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，
    以及一些定义在全局对象上的方法(比如Object.assign)都不会转码
  $ npm i babel-polyfill -D

    脚本头部加代码
    import 'babel-polyfill';
    // 或者
    require('babel-polyfill');

和eslint配合
  $ npm i eslint eslint-babel -D

  .babelrc
  {
    "presets": [
      "latest",
      "react",
      "stage-2",
    ],
    "plugins": [],
    "parser": "babel-eslint",
    "rule": {
    }
  }

  package.json
  {
    "scripts": {
      "test": "mocha --ui qunit --compilers js:babel-core/register",
      "lint": "eslint my-file.js",
      "build": "babel src -d lib"
    }
  }

  mocha是测试框架
  --compilers指定脚本转码器，后缀名为js文件，都需用babel-core/register先转码