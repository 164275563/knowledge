正则表达式: /pattern/flags
  flags:
    i: case-insensitive
    g: global, find all matches
    m: multiline
  RegExp method:
    /e/.test("learn"); //return true
    /e/.exec("learn"); //return ["e"], it is Array
  pattern:
    basic:
      .   character except newline
      a   character a
      ab  string ab
      a|b a or b
      a*  0 or more a's
      \   Escapes a special character
    quantifier:
      ?       0 or 1
      +       1 or more
      *       0 or more
      {2}     Exactly 2
      {2, 5}  Between 2 and 5
      {2,}    2 or more
    group:
      (...)   Capturing group
      (?:...) Non-capturing group
      \Y      Match the Y'th captured group
    class:
      [ab-d]  One character of: a, b, c, d
      [^ab-d] One character except: a, b, c, d
      [\b]    Backspace character
      \d  One digit
      \D  One non-digit
      \s  One whitespace
      \S  One non-whitespace
      \w  One word character
      \W  One non-word character
    assertion:
      ^ Start of string
      $ End of string
      \b  Word boundary
      \B  Non-word boundary
      (?=...) Positive lookahead
      (?!...) Negative lookahead    
    special character:
      \n  Newline
      \r  Carriage return
      \t  Tab
      \0  Null character
      \YYY    Octal character YYY
      \xYY    Hexadecimal character YY
      \uYYYY  Hexadecimal character YYYY
      \cY     Control character Y
    replacement:
      $$  Inserts $
      $&  Insert entire match
      $`  Insert preceding string
      $'  Insert following string
      $Y  Insert Y'th captured group

RegExp对象方法:
  test(): 返回值是布尔值。
  exec(): 返回一个数组,数组中的第一个条目是第一个匹配,其他的是反向引用
  compile(): 既可以改变检索模式,也可以添加或删除第二个参数。
    eg. /pattern/.test();

String正则:
  match(pattern)  返回pattern中的子串或 null
  replace(pattern, replacement)
  search(pattern) 返回pattern开始位置
  split(pattern)  返回字符串按pattern拆分的数组
    eg.  str.match(/pattern/);

exec()和match()的区别
  exec:返回数组,包括第一个匹配的字串,所有分组的反向引用
  match:没有g属性时同exec(); 有g属性时,返回所有匹配字符串合成的数组
