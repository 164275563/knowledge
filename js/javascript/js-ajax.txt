浏览器创建的XMLHttpRequest对象

XMLHttpRequest方法:
  new XMLHttpRequest()
  send()  //发送GET请求给服务端
  send(string) //发送POST请求给服务端
  abort() //取消当前请求
  setRequestHeader()  //Adds label/value pair to the header to be sent
  getResponseHeader()
  getAllResponseHeaders() 
  open(method, url, async, user, psw)
    //GET|POST, url, true|false, optional username, optional password

XMLHttpRequest属性:
  onreadystatechange //当readyState状态变化时执行函数
  readyState //XMLHttpRequest请求状态
    0: request not initialized 
    1: server connection established
    2: request received 
    3: processing request 
    4: request finished and response is ready
  status  //返回的状态码
    1xx：指示信息– 表示请求已接收,继续处理。
    2xx：成功– 表示请求已被成功接收。
      200: 成功
    3xx：重定向– 要完成请求必须进行更进一步的操作
      301：永久重定向
      302：暂时重定向
      304：请求内容未更改
    4xx：客户端错误– 请求有语法错误或请求无法实现
      400：请求语法错误,不被服务器理解
      401：请求未经授权
      403：服务器拒绝提供服务
      404：请求资源不存在
    5xx：服务器端错误– 服务器未能实现合法的请求
      500: 内部服务器错误
      503: 服务器当前不能处理请求
  responseText  //回应字符串数据
  responseXML   //回应XML数据
  statusText    //"OK"|"Not Found"
  eg.
    function myAjax(){
      var xhttp = new XMLHttpRequest();
      xhttp.open("GET","test.php",true);
      xhttp.send();
      xhttp.onreadystatechange = function() {
        if(this.readyState == 4 && this.status = 200) {
          document.getElementById("demo").innerHTML = this.responseText;
        }
      }
    }

HTTP协议:
  POST与GET:
    GET优点:
      GET减少不必要的带宽浪费
      GET可被缓存,可被收藏为书签,会保留在浏览器历史记录中,POST不会。
      GET常查询、获取数据,POST发送数据
    GET缺点:
      GET参数在URL中,不能传输敏感数据。
      GET请求长度有限制,URL数据是ASCII字符,POST请求没有限制。
    POST优点:
      POST请求数据写在HTTP请求头,安全性略高于GET请求

  cookie与session:
    使用原因: HTTP是无状态连接,客户端每次读取web页面,服务器都认为是新会话,Cookie和Session持久保存某些信息。
    区别: 
      cookie保存在客户端,session在服务器
      单个cookie的大小为4kb,每站点cookie数量一般为20个。
      session可设置超时时间,以免长期占用服务端内存。

  https:
    客户端发送随机数和支持的加密方式列表
    服务端将证书、公钥和另一随机数发送给客户端
    客户端用公钥将信息加密,密文发送给服务端
    服务端用私钥解密,再将返回数据用私钥加密发回客户端
    客户端用公钥解密
  随机数的作用？？？？？

JS跨域
  同源策略: 对XHR的约束，即"相同的协议、域、端口"才能通信
  CORS: 跨域资源共享，使用自定义的HTTP头部让浏览器和服务器沟通
    使用:  
      跟同源请求是相同的接口，xhr对象原生支持CORS，ie8通过XDomainRequest对象支持。
      由于同源请求和跨域请求都是相同接口，所以对于本地资源使用相对URL，对远程资源使用绝对URL
    安全限制:
      不能使用setRequestHeader()
      不能发送接收cookie
      调用getAllRequestHeaders()返回空字符创
    举例:
      let xhr = XMLHttpRequest();
      xhr.onreadystatechange = () => {
        if(xhr.readyState == 4) {
          if(xhr.status >= 200 && xhr.status < 300 || xhr.status == 304) {
            console.log(xhr.responseText);
          } else {
            console.log(xhr.status);
          }
        }
      }
      xhr.open('get', url, true);
      xhr.send(null);
  其他跨域技术: 图像Ping和JSONP
    图像ping
      概念：与服务器进行简单、单向的跨域通信的方式
      使用：使用img标签。浏览器得不到任何具体数据，但通过load和error事件，能知道何时接收到响应
      用途: 动态广告曝光次数和跟踪用户点击页面次数
      缺点: 只能发送get请求，无法访问服务器响应的文本
      举例: 
        let img = new Image()
        img.onload = img.onerror = () => console.log('done')
        img.src = ''
    JSONP：
      概念：在回调函数中调用JSON
      使用：使用动态的script标签，为src属性指定跨域的URL(url添加callback参数)
      举例：
        let cb = (res) => console.log(res.ip, res.city)
        let script = document.createElement('script')
        script.src = 'http://sss.com?callback=cb'
        document.body.insert(script, document.body.firstChild)
      优点: 能直接访问响应文本,支持浏览器和服务器的双向通信
  comet:
    实现方式: 长轮询和http流
      长轮询: 页面发送请求到服务器，服务器一直保持连接打开，直到有数据可发送。发送数据完，浏览器再开启新连接
      http流：在整个页面生命周期只使用一个http连接
    api接口：SSE(服务器发送事件), Web Sockets
      SSE:
        举例：
          let source = new EventSource('h.php')
          source.message = (event) => {
            let data = event.data
            //处理数据
          }
        属性方法:
          source.readyState. 0表连接到服务器，1表打开了连接，2表关闭了连接
          source.open|message|error事件，分别在建立连接是触发，接收到新事件触发，无法连接触发
      Web Sockets:
        用途：由于传递的数据包小，适合于移动应用
        优点：双向通信，有速度优势，适合聊天室等应用
        缺点：不使用普通服务器，需要构建Web Sockets服务器


相对协议URL
  浏览器遇到相对URL，会根据当前的网页协议，自动在//前面加上相同的协议。如当前网页是http 访问，那么所有的相对引用//都会变成http://。https同理。如果在本地查看，协议就会变成 file:/
  如果省略协议，就需要保证引用的外部资源也采用和网页相同的协议，或者保证资源可以同时通过 http 和https访问。这种用法几乎所有的浏览器都能支持，只有在 IE7/8 下会有一点小问题
  解决混合内容问题:
    通常是在浏览https网页的时候出现，原因是网页里引用了http协议的外部资源，由于http 被认为是不安全的，IE才会给出提示。如果引用的时候写成相对URL，浏览器就会自动采用 https 协议下载，这样就解决了问题


